plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.21'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.6.21'
    id 'application'
    id 'org.beryx.runtime' version '1.12.7'
}

group = 'me.danbu'
version = '1.0-SNAPSHOT'

allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url 'https://jitpack.io' }
    }

    apply plugin: 'application'
}

application {
    mainClass = "DesktopLauncher"
    applicationName = 'thundarr'
}

runtime {
    javaHome.set(System.getProperty("java.home"))

    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    launcher {
        noConsole = true
    }
    jpackage {
        // Uncomment and adjust the following line if your runtime task is configured to generate images for multiple platforms
        // targetPlatformName = "mac"

        def currentOs = org.gradle.internal.os.OperatingSystem.current()
        def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
        //imageOptions += ['--icon', "src/main/resources/hellofx.$imgType"]
        installerOptions += ['--resource-dir', "src/main/resources"]
        installerOptions += ['--vendor', 'dlfsystems']

        if(currentOs.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        }
        else if (currentOs.linux) {
            installerOptions += ['--linux-package-name', 'hellofx','--linux-shortcut']
        }
        else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'hellofx']
        }
    }
}

dependencies {
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-core-jvm:1.4.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:1.4.0'

    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    api "com.badlogicgames.gdx:gdx:$gdxVersion"
    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    api "io.github.libktx:ktx-collections:$ktxCollectionsVersion"
    api "io.github.libktx:ktx-tiled:$ktxTiledVersion"
    api "io.github.libktx:ktx-assets:$ktxAssetsVersion"
    api "io.github.libktx:ktx-async:$ktxAsyncVersion"
    api "io.github.libktx:ktx-assets-async:$ktxAssetsAsyncVersion"
    api "io.github.libktx:ktx-preferences:$ktxPreferencesVersion"
    api "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    api "io.github.libktx:ktx-freetype:$ktxFreetypeVersion"
    api "io.github.libktx:ktx-freetype-async:$ktxFreetypeAsyncVersion"
    api "io.github.libktx:ktx-graphics:$ktxGraphicsVersion"
    api "io.github.libktx:ktx-math:$ktxMathVersion"
    implementation "io.github.libktx:ktx-app:$ktxAppVersion"
    api "io.github.libktx:ktx-log:$ktxLogVersion"

    implementation 'io.github.microutils:kotlin-logging-jvm:3.0.0'
    implementation 'org.slf4j:slf4j-simple:2.0.3'

    implementation 'org.jetbrains.exposed:exposed-core:0.40.1'
    implementation 'org.jetbrains.exposed:exposed-jdbc:0.40.1'
    implementation 'org.xerial:sqlite-jdbc:3.39.3.0'
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
}
